#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################################################################################################
### DESCRIPTION:
### 
### 
#########################################################################################################################
### CHANGE HISTORY:
### MODIFICATION DATE 	CHANGED BY 	COMMENT
### YYYY-MM-DD 		Developer Name 	Creation of Process
### YYYY-MM-DD 		Developer Name 	Reason for modification here
### 
#########################################################################################################################

#########################################################################################################################
###  Constants
#########################################################################################################################

cCub_Src = 'Sales';
cCub_Tgt = 'Sales';

cYear = pYear;
cMult = StringToNumber( pMult );

cVersion = 'Actual';
cMonth = 'All Months';
cStore = 'All Countries';
cRelease = 'All Releases';

cDL_Dim = Char(176);
cDL_Start = Char(177);
cDL_Elem = Char(178);
cProcessName = GetProcessName();

#########################################################################################################################
###  Create Source View
#########################################################################################################################

cTempName = '}TI_' | cProcessName | NumberToString( Int( Rand() * 10000 ) );
While( ViewExists( cCub_Src, cTempName | '_Src' ) <> 0 );
  cTempName = '}TI_' | cProcessName | NumberToString( Int( Rand() * 10000 ) );
End;
cView_Src = cTempName | '_Src';
cSub = cTempName | '_Src';
ViewCreate( cCub_Src, cView_Src, 1 );

sDim = 'Version';
sElem = cVersion;
If( SubsetExists( sDim, cSub ) = 0 );
  SubsetCreate( sDim, cSub, 1 );
EndIf;
SubsetDeleteAllElements( sDim, cSub );
SubsetElementInsert( sDim, cSub, sElem, 1 );
ViewSubsetAssign( cCub_Src, cView_Src, sDim, cSub );

sDim = 'Year';
sElem = cYear;
If( SubsetExists( sDim, cSub ) = 0 );
  SubsetCreate( sDim, cSub, 1 );
EndIf;
SubsetDeleteAllElements( sDim, cSub );
SubsetElementInsert( sDim, cSub, sElem, 1 );
ViewSubsetAssign( cCub_Src, cView_Src, sDim, cSub );

sDim = 'Month';
sNode = cMonth;
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If( SubsetExists( sDim, cSub ) <> 0 );
  SubsetDestroy( sDim, cSub );
EndIf;
SubsetCreatebyMDX( cSub, sMDX, sDim, 1 );
nElem = SubsetGetSize( sDim, cSub );
sElem_Last = SubsetGetElementName( sDim, cSub, nElem );
SubsetElementDelete( sDim, cSub, nElem );
SubsetElementInsert( sDim, cSub, sElem_Last, nElem );
ViewSubsetAssign( cCub_Src, cView_Src, sDim, cSub );

sDim = 'Store';
sNode = cStore;
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If( SubsetExists( sDim, cSub ) <> 0 );
  SubsetDestroy( sDim, cSub );
EndIf;
SubsetCreatebyMDX( cSub, sMDX, sDim, 1 );
nElem = SubsetGetSize( sDim, cSub );
sElem_Last = SubsetGetElementName( sDim, cSub, nElem );
SubsetElementDelete( sDim, cSub, nElem );
SubsetElementInsert( sDim, cSub, sElem_Last, nElem );
ViewSubsetAssign( cCub_Src, cView_Src, sDim, cSub );

sDim = 'Release';
sNode = cRelease;
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If( SubsetExists( sDim, cSub ) <> 0 );
  SubsetDestroy( sDim, cSub );
EndIf;
SubsetCreatebyMDX( cSub, sMDX, sDim, 1 );
nElem = SubsetGetSize( sDim, cSub );
sElem_Last = SubsetGetElementName( sDim, cSub, nElem );
SubsetElementDelete( sDim, cSub, nElem );
SubsetElementInsert( sDim, cSub, sElem_Last, nElem );
ViewSubsetAssign( cCub_Src, cView_Src, sDim, cSub );

sDim = 'Sales Measure';
sElem = 'Units';
If( SubsetExists( sDim, cSub ) = 0 );
  SubsetCreate( sDim, cSub, 1 );
EndIf;
SubsetDeleteAllElements( sDim, cSub );
SubsetElementInsert( sDim, cSub, sElem, 1 );
ViewSubsetAssign( cCub_Src, cView_Src, sDim, cSub );

###  Set View as Data Source  ###
nCnt = 1;
While( TabDim( cCub_Src, nCnt ) @<> '' );
  sDim = TabDim( cCub_Src, nCnt );
  ViewRowDimensionSet( cCub_Src, cView_Src, sDim, nCnt );
  nCnt = nCnt + 1;
End;

ViewExtractSkipCalcsSet( cCub_Src, cView_Src, 1 );
ViewExtractSkipRuleValuesSet( cCub_Src, cView_Src, 0 );
ViewExtractSkipZeroesSet( cCub_Src, cView_Src, 0 );

DataSourceType = 'VIEW';
DataSourceNameForServer = cCub_Src;
DataSourceNameForClient = cCub_Src;
DataSourceCubeView = cView_Src;

#########################################################################################################################
###  Toggle off Cube Logging
#########################################################################################################################

CellPutS( 'NO', '}CubeProperties', cCub_Tgt, 'LOGGING' );

#########################################################################################################################
###  Clear Existing Data
#########################################################################################################################

###  Filter  ###
sFilter = 'Year' | cDL_Start | cYear;
sFilter = sFilter | cDL_Dim | 'Version' | cDL_Start | cVersion;

###  Clear Data  ###
ExecuteProcess( '}bedrock.cube.data.clear',
  'pLogOutput', 0,
  'pCube', cCub_Tgt,
  'pView', '',
  'pFilter', sFilter,
  'pFilterParallel', '',
  'pParallelThreads', 0,
  'pDimDelim', cDL_Dim,
  'pEleStartDelim', cDL_Start,
  'pEleDelim', cDL_Elem,
  'pCubeLogging', 0,
  'pTemp', 1 );

###  Filter  ###
sFilter = 'Year' | cDL_Start | cYear;
sFilter = sFilter | cDL_Dim | 'Version' | cDL_Start | 'Budget' | cDL_Elem | 'Forecast';
sFilter = sFilter | cDL_Dim | 'Sales Measure' | cDL_Start | 'Plan Flag';

###  Clear Data  ###
ExecuteProcess( '}bedrock.cube.data.clear',
  'pLogOutput', 0,
  'pCube', cCub_Tgt,
  'pView', '',
  'pFilter', sFilter,
  'pFilterParallel', '',
  'pParallelThreads', 0,
  'pDimDelim', cDL_Dim,
  'pEleStartDelim', cDL_Start,
  'pEleDelim', cDL_Elem,
  'pCubeLogging', 0,
  'pTemp', 1 );
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

nMultiplier = 1;

###  Skip Genre Plan Dummy  ###
If( SubSt( vRelease, 1, 11 ) @= 'Planning - ' );
  ItemSkip;
EndIf;

###  Sales not on every cell  ###
nCheck = Rand();
If ( nCheck > 0.01 );
  ItemSkip;
EndIf;

###  Bigger multipler for store size  ###
nMultiplier = ( AttrN ('Store', vStore, 'Employee Count' ) / 10 ) + nMultiplier;

###  Seasonality  ###
nMultiplier = ( AttrN('Month', vMonth, 'Seasonality') / 10 ) * nMultiplier;

###  Randomize based on multiplier  ### 
nUnit = Round( Rand() * Rand() * nMultiplier );

###  Cost between 3 - 10  ### 
nCost = RoundP( Max(10, (10 * Rand()) + 3), 0);

###  Price between 15 - 25  ### 
nPrice = RoundP(10 * Rand() + 15, 0);

CellPutN ( nUnit, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Units' );
CellPutN ( nCost, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Unit Cost' );
CellPutN ( nPrice, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Unit Price' );
CellPutN ( nUnit * nPrice, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Revenue' );
CellPutN ( nUnit * nCost, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Cost' );

If( CellGetN( cCub_Tgt, 'Budget', vYear, 'NA Month', vStore, vRelease, 'Plan Flag' ) = 0 );
  CellPutN ( 1, cCub_Tgt, 'Budget', vYear, 'NA Month', vStore, vRelease, 'Plan Flag' );
EndIf;

If( CellGetN( cCub_Tgt, 'Forecast', vYear, 'NA Month', vStore, vRelease, 'Plan Flag' ) = 0 );
  CellPutN ( 1, cCub_Tgt, 'Forecast', vYear, 'NA Month', vStore, vRelease, 'Plan Flag' );
EndIf;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****



#endregion