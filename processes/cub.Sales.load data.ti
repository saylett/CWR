#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################################################################################################
### DESCRIPTION:
### 
### 
#########################################################################################################################

#########################################################################################################################
###  Constants
#########################################################################################################################

cCub_Src = 'Sales';
cCub_Tgt = 'Sales';

cVersion = pVersion;
cYear = pYear;

cProcessName = GetProcessName;
cDL_Dim = Char(176);
cDL_Start = Char(177);
cDL_Elem = Char(178);

#########################################################################################################################
###  Create Source View
#########################################################################################################################

###  Define Temp Object Name and Create View  ###
cTempName = '}TI_' | cProcessName | NumberToString( Int( Rand() * 10000 ) );
While( ViewExists( cCub_Src, cTempName | '_Src' ) <> 0 );
    cTempName = '}TI_' | cProcessName | NumberToString( Int( Rand() * 10000 ) );
End;
cView_Src = cTempName | '_Src';
cSub = cTempName | '_Src';
ViewCreate( cCub_Src, cView_Src, 1 );

###  Assign Subset  ###
sDim = 'Version';
sElem = cVersion;
If (SubsetExists(sDim, cSub) = 0);
  SubsetCreate(sDim, cSub, 1);
EndIf;
SubsetDeleteAllElements(sDim, cSub);
SubsetElementInsert(sDim, cSub, sElem, 1);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Year';
sElem = cYear;
If (SubsetExists(sDim, cSub) = 0);
  SubsetCreate(sDim, cSub, 1);
EndIf;
SubsetDeleteAllElements(sDim, cSub);
SubsetElementInsert(sDim, cSub, sElem, 1);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Month';
sNode = 'All Months';
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If (SubsetExists(sDim, cSub) <> 0);
  SubsetDestroy(sDim, cSub);
EndIf;
SubsetCreatebyMDX(cSub, sMDX, sDim, 1);
nElem = SubsetGetSize(sDim, cSub);
sElem_Last = SubsetGetElementName(sDim, cSub, nElem);
SubsetElementDelete(sDim, cSub, nElem);
SubsetElementInsert(sDim, cSub, sElem_Last, nElem);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Store';
sNode = 'All Countries';
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If (SubsetExists(sDim, cSub) <> 0);
  SubsetDestroy(sDim, cSub);
EndIf;
SubsetCreatebyMDX(cSub, sMDX, sDim, 1);
nElem = SubsetGetSize(sDim, cSub);
sElem_Last = SubsetGetElementName(sDim, cSub, nElem);
SubsetElementDelete(sDim, cSub, nElem);
SubsetElementInsert(sDim, cSub, sElem_Last, nElem);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Release';
sNode = 'All Releases';
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If (SubsetExists(sDim, cSub) <> 0);
  SubsetDestroy(sDim, cSub);
EndIf;
SubsetCreatebyMDX(cSub, sMDX, sDim, 1);
nElem = SubsetGetSize(sDim, cSub);
sElem_Last = SubsetGetElementName(sDim, cSub, nElem);
SubsetElementDelete(sDim, cSub, nElem);
SubsetElementInsert(sDim, cSub, sElem_Last, nElem);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Sales Measure';
sElem = 'Units';
If (SubsetExists(sDim, cSub) = 0);
  SubsetCreate(sDim, cSub, 1);
EndIf;
SubsetDeleteAllElements(sDim, cSub);
SubsetElementInsert(sDim, cSub, sElem, 1);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Set View as Data Source  ###
nCnt = 1;
While( TabDim( cCub_Src, nCnt ) @<> '' );
  sDim = TabDim( cCub_Src, nCnt );
  ViewRowDimensionSet( cCub_Src, cView_Src, sDim, nCnt );
  nCnt = nCnt + 1;
End;

ViewExtractSkipCalcsSet( cCub_Src, cView_Src, 1 );
ViewExtractSkipRuleValuesSet( cCub_Src, cView_Src, 1 );
ViewExtractSkipZeroesSet( cCub_Src, cView_Src, 1 );

DataSourceType = 'VIEW';
DataSourceNameForServer = cCub_Src;
DataSourceNameForClient = cCub_Src;
DataSourceCubeView = cView_Src;

#########################################################################################################################
###  Toggle off Cube Logging
#########################################################################################################################

CellPutS( 'NO', '}CubeProperties', cCub_Tgt, 'LOGGING' );

#########################################################################################################################
###  Clear Existing Data
#########################################################################################################################

###  Filter  ###
sFilter = 'Version' | cDL_Start | cVersion;
sFilter = sFilter | cDL_Dim | 'Year' | cDL_Start | cYear;
sFilter = sFilter | cDL_Dim | 'Sales Measure' | cDL_Start |
  'Unit Cost' | cDL_Elem | 
  'Unit Price';

###  Clear Data  ###
ExecuteProcess( '}bedrock.cube.data.clear',
  'pLogOutput', 0,
  'pCube', cCub_Tgt,
  'pView', '',
  'pFilter', sFilter,
  'pFilterParallel', '',
  'pParallelThreads', 0,
  'pDimDelim', cDL_Dim,
  'pEleStartDelim', cDL_Start,
  'pEleDelim', cDL_Elem,
  'pCubeLogging', 0,
  'pTemp', 1 );
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

nUnit = vValue;

nPrice = RoundP( Rand() * 20, 0) + 5; 
nCost = RoundP( nPrice * (1 - Rand()), 0 ); 
nRevenue = nUnit * nPrice;
nCOGS = nUnit * nCost;

CellPutN(nPrice, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Unit Price');
CellPutN(nCost, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Unit Cost');

CellPutN(nRevenue, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Revenue');
CellPutN(nCOGS, cCub_Tgt, vVersion, vYear, vMonth, vStore, vRelease, 'Cost');
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#########################################################################################################################
###  Toggle on Cube Logging
#########################################################################################################################

CellPutS( 'YES', '}CubeProperties', cCub_Tgt, 'LOGGING' );

#endregion