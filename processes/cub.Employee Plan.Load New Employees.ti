#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################################################################################################
### DESCRIPTION:
### 
### 
#########################################################################################################################
### CHANGE HISTORY:
### MODIFICATION DATE 	CHANGED BY 	COMMENT
### YYYY-MM-DD 		Developer Name 	Creation of Process
### YYYY-MM-DD 		Developer Name 	Reason for modification here
### 
#########################################################################################################################

#########################################################################################################################
###  Constants
#########################################################################################################################

cCub_Src = 'New Employee Plan';
cCub_Tgt = 'Employee Plan';

cYear = pYear;
cStore = pStore;

cVersion = 'Budget';

cDL_Dim = Char(176);
cDL_Start = Char(177);
cDL_Elem = Char(178);
cProcessName = GetProcessName();

#########################################################################################################################
###  Validation
#########################################################################################################################

If( pConfirm @<> '1' );
  ProcessQuit();
EndIf;

#########################################################################################################################
###  Create Source View
#########################################################################################################################

###  Define Temp Object Name and Create View  ###
cTempName = '}TI_' | cProcessName | NumberToString( Int( Rand() * 10000 ) );
While( ViewExists( cCub_Src, cTempName | '_Src' ) <> 0 );
    cTempName = '}TI_' | cProcessName | NumberToString( Int( Rand() * 10000 ) );
End;
cView_Src = cTempName | '_Src';
cSub = cTempName | '_Src';
ViewCreate( cCub_Src, cView_Src, 1 );

###  Assign Subset  ###
sDim = 'Version';
sElem = cversion;
If (SubsetExists(sDim, cSub) = 0);
  SubsetCreate(sDim, cSub, 1);
EndIf;
SubsetDeleteAllElements(sDim, cSub);
SubsetElementInsert(sDim, cSub, sElem, 1);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Year';
sElem = cYear;
If (SubsetExists(sDim, cSub) = 0);
  SubsetCreate(sDim, cSub, 1);
EndIf;
SubsetDeleteAllElements(sDim, cSub);
SubsetElementInsert(sDim, cSub, sElem, 1);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'Store';
sNode = cStore;
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If (SubsetExists(sDim, cSub) <> 0);
  SubsetDestroy(sDim, cSub);
EndIf;
SubsetCreatebyMDX(cSub, sMDX, sDim, 1);
nElem = SubsetGetSize(sDim, cSub);
sElem_Last = SubsetGetElementName(sDim, cSub, nElem);
SubsetElementDelete(sDim, cSub, nElem);
SubsetElementInsert(sDim, cSub, sElem_Last, nElem);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'New Employee Line Item';
sNode = 'All Line Items';
sMDX = '{TM1FilterByLevel({Descendants({[' | sDim | '].[' | sNode | ']})}, 0)}';
If (SubsetExists(sDim, cSub) <> 0);
  SubsetDestroy(sDim, cSub);
EndIf;
SubsetCreatebyMDX(cSub, sMDX, sDim, 1);
nElem = SubsetGetSize(sDim, cSub);
sElem_Last = SubsetGetElementName(sDim, cSub, nElem);
SubsetElementDelete(sDim, cSub, nElem);
SubsetElementInsert(sDim, cSub, sElem_Last, nElem);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Assign Subset  ###
sDim = 'New Employee Plan Measure';
sElem = 'Name';
If (SubsetExists(sDim, cSub) = 0);
  SubsetCreate(sDim, cSub, 1);
EndIf;
SubsetDeleteAllElements(sDim, cSub);
SubsetElementInsert(sDim, cSub, sElem, 1);
ViewSubsetAssign(cCub_Src, cView_Src, sDim, cSub);

###  Set View as Data Source  ###
nCnt = 1;
While( TabDim( cCub_Src, nCnt ) @<> '' );
  sDim = TabDim( cCub_Src, nCnt );
  ViewRowDimensionSet( cCub_Src, cView_Src, sDim, nCnt );
  nCnt = nCnt + 1;
End;

ViewExtractSkipCalcsSet( cCub_Src, cView_Src, 0 );
ViewExtractSkipRuleValuesSet( cCub_Src, cView_Src, 0 );
ViewExtractSkipZeroesSet( cCub_Src, cView_Src, 1 );

DataSourceType = 'VIEW';
DataSourceNameForServer = cCub_Src;
DataSourceNameForClient = cCub_Src;
DataSourceCubeView = cView_Src;

#########################################################################################################################
###  Toggle off Cube Logging
#########################################################################################################################

CellPutS( 'NO', '}CubeProperties', cCub_Tgt, 'LOGGING' );

#########################################################################################################################
###  Clear Existing Data
#########################################################################################################################

###  Filter  ###
sFilter = 'Year' | cDL_Start | cYear;
sFilter = sFilter | cDL_Dim | 'Month' | cDL_Start | 'NA Month';
sFilter = sFilter | cDL_Dim | 'Version' | cDL_Start | cVersion;
sFilter = sFilter | cDL_Dim | 'Employee' | cDL_Start | 'New Employees';
sFilter = sFilter | cDL_Dim | 'Employee Plan Measure' | cDL_Start | 'Salary - Annual';

###  Clear Data  ###
ExecuteProcess( '}bedrock.cube.data.clear',
  'pLogOutput', 0,
  'pCube', cCub_Tgt,
  'pView', '',
  'pFilter', sFilter,
  'pFilterParallel', '',
  'pParallelThreads', 0,
  'pDimDelim', cDL_Dim,
  'pEleStartDelim', cDL_Start,
  'pEleDelim', cDL_Elem,
  'pCubeLogging', 0,
  'pTemp', 1 );
  
###  Filter  ###
sFilter = 'Year' | cDL_Start | cYear;
sFilter = sFilter | cDL_Dim | 'Employee' | cDL_Start | 'New Employees';
sFilter = sFilter | cDL_Dim | 'Version' | cDL_Start | cVersion;

###  Clear Data  ###
ExecuteProcess( '}bedrock.cube.data.clear',
  'pLogOutput', 0,
  'pCube', 'Employee Plan Assumptions',
  'pView', '',
  'pFilter', sFilter,
  'pFilterParallel', '',
  'pParallelThreads', 0,
  'pDimDelim', cDL_Dim,
  'pEleStartDelim', cDL_Start,
  'pEleDelim', cDL_Elem,
  'pCubeLogging', 0,
  'pTemp', 1 );

###  Filter  ###
sFilter = 'Employee' | cDL_Start | 'New Employees';

###  Clear Data  ###
ExecuteProcess( '}bedrock.cube.data.clear',
  'pLogOutput', 0,
  'pCube', '}ElementAttributes_Employee',
  'pView', '',
  'pFilter', sFilter,
  'pFilterParallel', '',
  'pParallelThreads', 0,
  'pDimDelim', cDL_Dim,
  'pEleStartDelim', cDL_Start,
  'pEleDelim', cDL_Elem,
  'pCubeLogging', 0,
  'pTemp', 1 );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

sEmployee = CellGetS(cCub_Src, vVersion, vYear, vStore, vItem, 'Name');
sPosition = CellGetS(cCub_Src, vVersion, vYear, vStore, vItem, 'Position');
sDate_Start = CellGetS(cCub_Src, vVersion, vYear, vStore, vItem, 'Start Date');
sGrade = CellGetS(cCub_Src, vVersion, vYear, vStore, vItem, 'Job Grade');
sExempt = CellGetS(cCub_Src, vVersion, vYear, vStore, vItem, 'Exempt');

nSalary = CellGetN(cCub_Src, vVersion, vYear, vStore, vItem, 'Annual Salary');
nAllowance = CellGetN(cCub_Src, vVersion, vYear, vStore, vItem, 'Monthly Allowance');
nBonus_Rate = CellGetN(cCub_Src, vVersion, vYear, vStore, vItem, 'Bonus Rate');

nCnt = 1;
nFlag_Stop = 0;
While( nFlag_Stop = 0 & nCnt <= ElCompN( 'Employee', 'New Employees' ) );
  sElem = ElComp( 'Employee', 'New Employees', nCnt );
  If( AttrS( 'Employee', sElem, 'Name' ) @= '' );
    nFlag_Stop = 1;
  Else;
    nCnt = nCnt + 1;
  EndIf;
End;

sLastName = Subst( sEmployee, Scan(' ', sEmployee) + 1, Long( sEmployee ) - Scan(' ', sEmployee) );
sInitial = Subst( sEmployee, 1, 1 ) | ' ' | sLastName; 
AttrPutS( sEmployee, 'Employee', sElem, 'Name' );
AttrPutS( sElem | ' - ' | sEmployee, 'Employee', sElem, 'ID - Name' );
AttrPutS( sLastName, 'Employee', sElem, 'Last Name' );
AttrPutS( sInitial, 'Employee', sElem, 'First Initial Last Name' );
AttrPutS( sDate_Start, 'Employee', sElem, 'Date Start' );

AttrPutS(sPosition, 'Employee', sElem, 'Position');
AttrPutS(vStore, 'Employee', sElem, 'Store Budget');
AttrPutS(sGrade, 'Employee', sElem, 'Job Grade');
AttrPutS(sExempt, 'Employee', sElem, 'Exempt');

CellPutN(nSalary, cCub_Tgt, 'Budget', 'Local', vYear, 'NA Month', vStore, 'New Employee Model', sElem, 'Salary - Annual');
CellPutS(sDate_Start, cCub_Tgt, 'Budget', 'Local', vYear, 'NA Month', vStore, 'New Employee Model', sElem, 'Date - Start');

CellPutN(nBonus_Rate, 'Employee Plan Assumptions', 'Budget', vYear, sElem, 'Bonus - Rate');
CellPutN(nAllowance, 'Employee Plan Assumptions', 'Budget', vYear, sElem, 'Allowance - Monthly');

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#########################################################################################################################
###  Update Virtual Hierarchies
#########################################################################################################################

ExecuteProcess('Dim.Employee.Update Hierarchy.ALL');


LogOutput('WARN', 'Please confirm load');
#endregion